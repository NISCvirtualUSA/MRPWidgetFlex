<?xml version="1.0" encoding="utf-8"?>

<!--
///////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2011-2014, G&H International Services Inc. All Rights Reserved
///////////////////////////////////////////////////////////////////////////////
-->

<viewer:BaseWidget xmlns:fx="http://ns.adobe.com/mxml/2009"
                   xmlns:s="library://ns.adobe.com/flex/spark"
                   xmlns:mx="library://ns.adobe.com/flex/mx"
                   xmlns:Query="widgets.MRP_Widget.*"
                   xmlns:viewer="com.esri.viewer.*"
                   widgetConfigLoaded="init()" xmlns:ns="widgets.MRP_Widget.*">

    <viewer:states>
        <s:State name="resultsList"/>
        <s:State name="filterInput"/>
    </viewer:states>

    <viewer:transitions>
        <s:Transition autoReverse="true" toState="*">
            <s:Fade targets="{[resultsList, filterInput]}"/>
        </s:Transition>
    </viewer:transitions>

    <fx:Script>
        <![CDATA[
			import com.esri.ags.FeatureSet;
			import com.esri.ags.Graphic;
			import com.esri.ags.Map;
			import com.esri.ags.events.LayerEvent;
			import com.esri.ags.geometry.Geometry;
			import com.esri.ags.geometry.MapPoint;
			import com.esri.ags.layers.FeatureLayer;
			import com.esri.ags.layers.GraphicsLayer;
			import com.esri.ags.layers.supportClasses.CodedValue;
			import com.esri.ags.layers.supportClasses.CodedValueDomain;
			import com.esri.ags.layers.supportClasses.FeatureType;
			import com.esri.ags.layers.supportClasses.Field;
			import com.esri.ags.layers.supportClasses.LayerDetails;
			import com.esri.ags.portal.PopUpRenderer;
			import com.esri.ags.portal.supportClasses.PopUpInfo;
			import com.esri.ags.portal.supportClasses.PopUpMediaInfo;
			import com.esri.ags.symbols.PictureMarkerSymbol;
			import com.esri.ags.symbols.SimpleFillSymbol;
			import com.esri.ags.symbols.SimpleLineSymbol;
			import com.esri.ags.symbols.Symbol;
			import com.esri.ags.tasks.supportClasses.Query;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.events.FlexEvent;
			import mx.events.ItemClickEvent;
			import mx.events.ModuleEvent;
			import mx.formatters.DateFormatter;
			import mx.rpc.AsyncResponder;
			import mx.utils.StringUtil;
			
			import spark.collections.Sort;
			import spark.collections.SortField;
			import spark.components.supportClasses.ItemRenderer;
			import spark.events.IndexChangeEvent;
			import spark.filters.GlowFilter;
			import spark.primitives.BitmapImage;
			
			import widgets.MRP_Widget.ResultAttributesMRP;
			import widgets.MRP_Widget.ResultItemMRP;

			
            private const ICON_URL:String = "assets/images/mrp/";
			
			[Bindable]
			private var mrpIcon:BitmapImage = new BitmapImage();
						

            [Bindable]
            private var filterFieldAlias:String;
            [Bindable]
            private var msgVisible:Boolean = false;
            [Bindable]
            private var queryResultAC:ArrayCollection;

            private var allFields:Boolean;
            private var fields:XMLList;
            private var filterField:String;
            private var graphicsLayer:GraphicsLayer;
            private var infowidgetReady:Boolean = false;
            private var queryExpr:String;
            private var queryLayer:FeatureLayer;
            private var layerDetails:LayerDetails;
            private var queryLinkField:String;
            private var queryRefreshRate:String;
            private var queryTitleField:String;

			private var queryMRPStatus:String; //MRP
			private var queryMRPState:String; //MRP
			private var queryMRPCatalogType:String; //MRP
			private var queryNIMSCategory:String; //MRP	
			private var queryEstFixedCost:String; //MRP			
			private var resetWidgetTitle:String;//MRP
			private var lastMRPStatus:String="";
			private var lastSelectedESF:String="";
			private var lastSymbol:String="status";
			
			[Bindable]
			private var esfPickListAC:ArrayCollection;

			private var grayGlow:spark.filters.GlowFilter; //MRP				
			private var greenGlow:spark.filters.GlowFilter; //MRP
			private var redGlow:spark.filters.GlowFilter; //MRP
			private var yellowGlow:spark.filters.GlowFilter; //MRP
			private var whiteGlow:spark.filters.GlowFilter;//MRP
			
            private var timer:Timer;
            private var zoomScale:Number = 50000;
            private var mouseDownStageX:Number;
            private var mouseDownStageY:Number;
            private var dateFormatter:DateFormatter = new DateFormatter();
            private var textDirection:String;

            private var loadingLabel:String;
            private var textFilterClear:String;
            private var textFilterLabel:String;
            private var noResultLabel:String;
            private var featuresFoundLabel:String;
            [Bindable]
            private var filterButtonLabel:String;
            [Bindable]
            private var clearButtonLabel:String;

            private var resultMarkerSymbol:Symbol;
            private var resultLineSymbol:Symbol;
            private var resultFillSymbol:Symbol;

            private var popUpRenderer:PopUpRenderer = new PopUpRenderer();
			private var myTableWindow:ESFLegend;
			import mx.managers.PopUpManager;

            private function init():void
            {
                if (configXML)
                {
                    textDirection = getStyle("direction");

                    loadingLabel = configXML.labels.loading || configXML.labels.loadinglabel || getDefaultString("loadingLabel"); // other widgets use "loadinglabel" in their xml and so should this, but since 2.1 was released with "loading", we'll keep QueryWidget slightly inconsistent
                    textFilterLabel = configXML.labels.filterresults || getDefaultString("filterTitleBarTooltip");
                    textFilterClear = configXML.labels.filterclear || getDefaultString("showallTitleBarTooltip");
                    filterButtonLabel = configXML.labels.filterbuttonlabel || getDefaultString("filterButtonLabel");
                    clearButtonLabel = configXML.labels.clearbuttonlabel || getDefaultString("clearButtonLabel");
                    noResultLabel = configXML.labels.noresultlabel || getDefaultString("noFeatures");
                    featuresFoundLabel = configXML.labels.featuresfoundlabel || getDefaultString("featuresFoundLabel");

                    filterField = configXML.filterfield.name;
                    filterFieldAlias = configXML.filterfield.alias || configXML.filterfield.name;
                    var layerURL:String = configXML.layer;
                    var useAMF:String = configXML.useamf;

                    queryExpr = configXML.query;
                    if (!queryExpr) // server requires query to have at least one of 'geometry', 'text', or 'where' properties set. In this widget we only use 'where', so make sure it is always set.
                    {
                        queryExpr = "1=1"; // ... is always true
                    }

                    if (configXML.fields[0])
                    {
                        allFields = configXML.fields[0].@all[0] == "true";
                        fields = configXML.fields[0].field;
                    }
                    queryTitleField = configXML.titlefield;
                    queryLinkField = configXML.linkfield;
                    queryRefreshRate = configXML.refreshrate;
					
					queryMRPStatus = configXML.mrpstatus_field;//MRP
					queryMRPCatalogType = configXML.mrpcatalogtype_field;//MRP
					queryNIMSCategory = configXML.nimscategory_field;//MRP
					queryEstFixedCost = configXML.mrpestfixedcost_field;//MRP
					queryMRPState = configXML.mrpstate_field;//MRP
					//resetWidgetTitle = wTemplate.widgetTitle + " ";//MRP
					resetWidgetTitle =  "";

                    //useproxy
                    var useProxy:Boolean;
                    if (configXML.useproxy.length() > 0)
                    {
                        useProxy = configXML.useproxy == "true";
                    }

                    if (Number(configXML.zoomscale) > 0)
                    {
                        zoomScale = Number(configXML.zoomscale);
                    }

					// Icon for radio Button
					mrpIcon.source="@Embed('assets/images/mrp/btnIconMRP25x.png')";
					
                    //marker symbol
                    const resultMarkerSymbolURL:String = configXML.symbols.picturemarkersymbol.@url || widgetIcon;
                    const resultMarkerSymbolHeight:Number = (configXML.symbols.picturemarkersymbol.@height != null) ? configXML.symbols.picturemarkersymbol.@height : 30;
                    const resultMarkerSymbolWidth:Number = (configXML.symbols.picturemarkersymbol.@width != null) ? configXML.symbols.picturemarkersymbol.@width : 30;
                    const resultMarkerSymbolXOffset:Number = (configXML.symbols.picturemarkersymbol.@xoffset != null) ? configXML.symbols.picturemarkersymbol.@xoffset : 0;
                    const resultMarkerSymbolYOffset:Number = (configXML.symbols.picturemarkersymbol.@yoffset != null) ? configXML.symbols.picturemarkersymbol.@yoffset : 0;
                    resultMarkerSymbol = new PictureMarkerSymbol(resultMarkerSymbolURL, resultMarkerSymbolWidth, resultMarkerSymbolHeight, resultMarkerSymbolXOffset, resultMarkerSymbolYOffset);

                    //line symbol
                    const resultLineSymbolColor:uint = configXML.symbols.simplelinesymbol.@color || 0xFF0000;
                    const resultLineSymbolAlpha:Number = (configXML.symbols.simplelinesymbol.@alpha[0] != null) ? configXML.symbols.simplelinesymbol.@alpha : 0.8;
                    const resultLineSymbolWidth:Number = (configXML.symbols.simplelinesymbol.@width[0] != null) ? configXML.symbols.simplelinesymbol.@width : 2;
                    resultLineSymbol = new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, resultLineSymbolColor, resultLineSymbolAlpha, resultLineSymbolWidth);

                    // fill symbol
                    const resultFillSymbolColor:uint = configXML.symbols.simplefillsymbol.@color || 0xFF0000;
                    const resultFillSymbolAlpha:Number = (configXML.symbols.simplefillsymbol.@alpha[0] != null) ? configXML.symbols.simplefillsymbol.@alpha : 0.5;
                    const resultFillSymbolOutlineColor:uint = configXML.symbols.simplefillsymbol.outline.@color || 0xFF0000;
                    const resultFillSymbolOutlineAlpha:Number = (configXML.symbols.simplefillsymbol.outline.@alpha[0] != null) ? configXML.symbols.simplefillsymbol.outline.@alpha : 0.8;
                    const resultFillSymbolOutlineWidth:Number = (configXML.symbols.simplefillsymbol.outline.@width[0] != null) ? configXML.symbols.simplefillsymbol.outline.@width : 2;
                    resultFillSymbol = new SimpleFillSymbol(SimpleFillSymbol.STYLE_SOLID, resultFillSymbolColor, resultFillSymbolAlpha, new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, resultFillSymbolOutlineColor, resultFillSymbolOutlineAlpha, resultFillSymbolOutlineWidth));

					
					
                    graphicsLayer = new GraphicsLayer();
                    graphicsLayer.name = configXML.layername || widgetTitle;
                    graphicsLayer.symbol = resultMarkerSymbol;
                    graphicsLayer.addEventListener(FlexEvent.HIDE, graphicsLayer_hideHandler);
                    map.addLayer(graphicsLayer);
					
					grayGlow=new spark.filters.GlowFilter();
					grayGlow.alpha = 1;
					grayGlow.blurX = 4;
					grayGlow.blurY = 4;
					grayGlow.strength = 10;
					grayGlow.color = 0x555555;
					
					greenGlow=new spark.filters.GlowFilter();
					greenGlow.alpha = 1;
					greenGlow.blurX = 5;
					greenGlow.blurY = 5;
					greenGlow.strength = 10;
					greenGlow.inner=false;
					greenGlow.color = 0x00CC00;
					
					redGlow=new spark.filters.GlowFilter();
					redGlow.alpha = 1;
					redGlow.blurX = 5;
					redGlow.blurY = 5;
					redGlow.strength = 10;
					redGlow.inner=false;
					redGlow.color = 0xCC3333;
					
					yellowGlow=new spark.filters.GlowFilter();
					yellowGlow.alpha = 1;
					yellowGlow.blurX = 5;
					yellowGlow.blurY = 5;
					yellowGlow.strength = 10;
					yellowGlow.inner=false;
					yellowGlow.color = 0xFFFF00;
					
					whiteGlow=new spark.filters.GlowFilter();
					whiteGlow.alpha = 1;
					whiteGlow.blurX = 7;
					whiteGlow.blurY = 7;
					whiteGlow.strength = 10;
					whiteGlow.inner=false;
					whiteGlow.color = 0xFFFFFF;
					


                    if (layerURL)
                    {
                        queryLayer = new FeatureLayer(layerURL);
                        if (useProxy && configData.proxyUrl)
                        {
                            queryLayer.proxyURL = configData.proxyUrl;
                        }
                        if (useAMF)
                        {
                            queryLayer.useAMF = useAMF == "true";
                        }
                        if (queryRefreshRate)
                        {
                            queryLayer.disableClientCaching = true; // turn on only if using a refresh timer
                        }
                        if (allFields)
                        {
                            queryLayer.outFields = [ "*" ];
                        }
                        else
                        {
                            queryLayer.outFields = [];
                            for each (var fieldXML:XML in fields)
                            {
                                if (fieldXML.@name[0])
                                {
                                    queryLayer.outFields.push(fieldXML.@name[0]);
                                }
                            }
                        }
                    }
                }

				
				// insert single refresh tool on title bar				
				wTemplate.addTitlebarButton(ICON_URL + "refresh_grey.png", "Refresh MRPs", refreshMRPs);
                this.currentState = "resultsList";
                

                if (queryLayer.loaded)
                {
                    layerDetails = queryLayer.layerDetails;
                    createAndStartWidgetTimer();
                    queryFeatures();
                }
                else
                {
                    queryLayer.addEventListener(LayerEvent.LOAD, queryLayer_loadHandler);
                    function queryLayer_loadHandler(event:LayerEvent):void
                    {
                        layerDetails = queryLayer.layerDetails;
                        createAndStartWidgetTimer();
                        queryFeatures();
                    }
                }
            }

            private function graphicsLayer_hideHandler(event:FlexEvent):void
            {
                hideInfoWindow();
            }

            private function infoError(event:ModuleEvent):void
            {
                this.showMessage(event.errorText, true);
            }

            private function createAndStartWidgetTimer():void
            {
                if (queryRefreshRate)
                {
                    if (!timer)
                    {
                        var seconds:Number = Number(queryRefreshRate);
                        var rate:Number = seconds * 1000;
                        timer = new Timer(rate);
                        timer.addEventListener(TimerEvent.TIMER, timerTick);
                    }
                    timer.start();
                }
            }

            private function stopWidgetTimer():void
            {
                if (timer && timer.running)
                {
                    timer.stop();
                }
            }

            private function startWidgetTimer():void
            {
                if (timer && !timer.running)
                {
                    timer.start();
                }
            }

            private function timerTick(event:TimerEvent):void
            {
                queryFeatures();
            }

			private function refreshMRPs():void
			{
				clearMessage();
				destroyGraphicsLayer();// must clear layer
				queryFeatures();
				hideInfoWindow();
				btnByStatus.selected=true;// resets the icon to the standard MRP Icon
				
			}
			
			
			
			
			
            private function queryFeatures():void
            {
                if (queryLayer)
                {
                    var query:Query = new Query();
                    query.where = queryExpr;
                    query.outSpatialReference = map.spatialReference;

                    queryLayer.queryFeatures(query, new AsyncResponder(onResult, onFault));
                    showMessage(loadingLabel, true);

                    function onResult(featureSet:FeatureSet, token:Object = null):void
                    {
                        try
                        {
                            queryResultAC = createQueryResults(featureSet);
                            addSharedData(widgetTitle, queryResultAC);

                            clearMessage();
                            if (queryResultAC.length < 1)
                            {
                                showMessage(noResultLabel, false);
                            }
                            else
                            {
                                //showMessage(StringUtil.substitute(featuresFoundLabel, queryResultAC.length), false);
								showMessage(" Count: " + queryResultAC.length, false);// MRP
								if(lastMRPStatus=="")// refresh should not change the last filter
								{
								
								trace("No LastMRPStatus")
									selectMRPStatus('Available')
									lastSelectedESF=="All Resource Packages"
									createESF_MRP_pickList(queryResultAC);
									sortESFTypes();
//									btnByStatus.selected=true;// this sets the symbol selector to MRP Status
								}
								else
								{
									trace("Last Status: " + lastMRPStatus)
									selectMRPStatus(lastMRPStatus);
									//lastSelectedESF=="All Resource Packages"
									createESF_MRP_pickList(queryResultAC);
									sortESFTypes();
									//mrpGraphicsOn();// retain the filter and presention even when you reffew
//									btnByStatus.selected=true;// this sets the symbol selector to MRP Status
								}
								
								
								
                            }
                        }
                        catch (error:Error)
                        {
                            showMessage(error.message, false);
                        }
                    }

                    function onFault(info:Object, token:Object = null):void
                    {
                        showMessage(info.toString(), false);
                    }
                }
            }

            private function createQueryResults(featureSet:FeatureSet):ArrayCollection
            {
                graphicsLayer.clear();
				
				var getMRPStatus:String="";
				var getMRPState:String="";
				var getNIMSCategory:String="";
				var getESFIcon:String="";
				var getMRPCatalogType:String="";
				var getEstFixedCost:String="";

                var result:ArrayCollection = new ArrayCollection();

                if (!queryTitleField)
                {
                    queryTitleField = featureSet.displayFieldName;
                }

                for each (var graphic:Graphic in featureSet.features)
                {
                    var value:String = "";
                    var title:String = "";
                    var content:String = "";
                    var link:String = "";

                    if (allFields)
                    {
                        if (layerDetails.fields)
                        {
                            for each (var field:Field in layerDetails.fields)
                            {
                                if (field.name in graphic.attributes)
                                {
                                    displayFields(field.name, getFieldXML(field.name), field);
                                }
                            }
                        }
                        else
                        {
                            for (var fieldName:String in graphic.attributes)
                            {
                                displayFields(fieldName, getFieldXML(fieldName), null);
                            }
                        }
                    }
                    else
                    {
                        for each (var fieldXML:XML in fields) // display the fields in the same order as specified
                        {
                            if (fieldXML.@name[0] in graphic.attributes)
                            {
                                displayFields(fieldXML.@name[0], fieldXML, getField(fieldXML.@name[0]));
                            }
                        }
                    }

                    function displayFields(fieldName:String, fieldXML:XML, field:Field):void
                    {
                        value = graphic.attributes[fieldName] ? String(graphic.attributes[fieldName]) : "";

                        if (value)
                        {
                            var isDateField:Boolean;
                            var useUTC:Boolean;
                            var dateFormat:String;
                            if (fieldXML)
                            {
                                useUTC = fieldXML.@useutc[0] == "true";
                                dateFormat = fieldXML.@dateformat[0];
                                if (dateFormat)
                                {
                                    isDateField = true;
                                }
                            }
                            if (!isDateField && field)
                            {
                                isDateField = field.type == Field.TYPE_DATE;
                            }
                            if (isDateField)
                            {
                                var dateMS:Number = Number(value);
                                if (!isNaN(dateMS))
                                {
                                    value = msToDate(dateMS, dateFormat, useUTC);
                                }
                            }
                            else
                            {
                                var typeID:String = layerDetails.typeIdField ? graphic.attributes[layerDetails.typeIdField] : null;
                                if (fieldName == layerDetails.typeIdField)
                                {
                                    // replace value with feature type name
                                    var featureType:FeatureType = getFeatureType(typeID);
                                    if (featureType && featureType.name)
                                    {
                                        value = featureType.name;
                                    }
                                }
                                else
                                {
                                    // replace value with coded value name if one exists
                                    var codedValue:CodedValue = getCodedValue(fieldName, value, typeID);
                                    if (codedValue)
                                    {
                                        value = codedValue.name;
                                    }
                                }
                            }
                        }

                        if (fieldName.toUpperCase() == queryTitleField.toUpperCase())
                        {
                            title = value;
                            if (!title)
                            {
                                title = widgetTitle;
                            }
                        }
						
						
						//JF - USE VALUES FROM "SEARCHFIELD" FOR THE SEARCH BY NAME PICK LIST							
						if (fieldName.toUpperCase() == queryMRPStatus.toUpperCase())
						{
							getMRPStatus = value;
//							trace(queryMRPStatus.toUpperCase())
//							trace(getMRPStatus);
						}
						
						if (fieldName.toUpperCase() == queryMRPState.toUpperCase())
						{
							getMRPState = value
							//							trace(queryMRPStatus.toUpperCase())
							//							trace(getMRPStatus);
						}
						
						
						if (fieldName.toUpperCase() == queryMRPCatalogType.toUpperCase())
						{
							getMRPCatalogType = value;
//							trace(queryMRPCatalogType);
//							trace(getMRPCatalogType);
							
						}
						
						//JF Parse the Mixed Start Time Values for DNC MEL FIELD IN CONFIG
						// Assign ESF Icons to the MASS Data
						if (fieldName.toUpperCase() == queryNIMSCategory.toUpperCase())
						{
							getNIMSCategory = value;
							
							getESFIcon=calcESF(getNIMSCategory);
						//	trace(getESFIcon);
//							trace(queryNIMSCategory);
//							trace(getNIMSCategory +  "nims")

						}
						
						//JF Parse the Mixed Start Time Values for DNC MEL FIELD IN CONFIG
						if (fieldName.toUpperCase() == queryEstFixedCost.toUpperCase())
						{
							getEstFixedCost = value;

							
						}
					
                        else if (fieldName.toUpperCase() == queryLinkField.toUpperCase())
                        {
                            link = value;
                        }
                        else if (fieldName.toUpperCase() != "SHAPE_LENGTH" && fieldName.toUpperCase() != "SHAPE_AREA")
                        {
                            var fieldLabel:String;

                            if (fieldXML && fieldXML.@alias[0])
                            {
                                fieldLabel = fieldXML.@alias[0];
                            }
                            else
                            {
                                fieldLabel = featureSet.fieldAliases[fieldName];
                            }

                            if (textDirection == "rtl")
                            {
                                content += value + " :" + fieldLabel + "\n";
                            }
                            else
                            {
                                content += fieldLabel + ": " + value + "\n";
                            }
                        }
                    }

					// create attributes for the graphics object using resultAttributes.as class
					
                    var resultAttributes:ResultAttributesMRP = new ResultAttributesMRP();
                    	resultAttributes.title = title;
                    	resultAttributes.content = content;
						resultAttributes.graphic = graphic;
						resultAttributes.geometry = graphic.geometry;
                    	resultAttributes.link = link ? link : null;
						resultAttributes.mrpStatus = getMRPStatus;
						resultAttributes.mrpState = getMRPState;
						resultAttributes.mrpCatalogType = getMRPCatalogType;
						resultAttributes.nimsCategory = getNIMSCategory;
						
						resultAttributes.mrpESFIcon = getESFIcon;
						resultAttributes.mrpESF = getESFName(resultAttributes.nimsCategory)
						resultAttributes.mrpStateIcon = calcStateIcon(resultAttributes.mrpState);
						
						if (getEstFixedCost!="") 
						{
							var temp:Number = Number(getEstFixedCost); 
							resultAttributes.mrpEstFixedCost = usdFormatter.format(temp);
						} else 
						{
							resultAttributes.mrpEstFixedCost = "No Estimate Available";
						}
						
// ********************************************************					
// 	Assign MRP status graphic based on MRP Status Field Values.  
//	Values also appear in the ESFLegend.mxml	
// ********************************************************					
						
						// Green MRP - AVAILABLE
						if(getMRPStatus=="Available")
						{
							resultAttributes.mrpStatusIcon = "assets/images/mrp/MRP_Available_Green.png";
							resultAttributes.mrpSimpleStatus="Available";
						}
							
						// Red MRP - NOT AVAILABLE
						else if(getMRPStatus=="Not Available")
						{
							resultAttributes.mrpStatusIcon = "assets/images/mrp/MRP_NotAvailable_Red.png";
							resultAttributes.mrpSimpleStatus="Not Available";
						}
							
							
						// Yellow - CURRENTLY OPERATING
						else if((getMRPStatus=="Assignment to Jurisdiction") || (getMRPStatus=="Arrive at Jurisdiction")
							|| (getMRPStatus=="Acceptance of Mission") || (getMRPStatus=="Begin Movement") 
							|| (getMRPStatus=="Operational at Jurisdiction") || (getMRPStatus=="Released by Jurisdiction"))
						{							
							resultAttributes.mrpStatusIcon = "assets/images/mrp/MRP_Other_Yellow.png";
							resultAttributes.mrpSimpleStatus="Currently Operating";							
						}
						
						
						// White - Either no status value or 
						//	"At Home Station" but not available
						//	"De-mob or Reassigned" , not availble
						else //if((getMRPStatus=="") || (getMRPStatus==null))
						{
							resultAttributes.mrpStatusIcon = "assets/images/mrp/MRP_NULL_White.png";
							resultAttributes.mrpSimpleStatus="N/A";
						}							
						
						
						var queryResult:ResultItemMRP = new ResultItemMRP(graphic, resultAttributes);
						
						resultAttributes.point = queryResult.center; //getGeomCenter(graphic);

						// use the correct status icon  34 x 25  or 38x28					
						// var newMRPSymbol:PictureMarkerSymbol = new PictureMarkerSymbol(resultAttributes.mrpESFIcon, 38, 28, 0, 10);	
						var newMRPSymbol:PictureMarkerSymbol = new PictureMarkerSymbol(resultAttributes.mrpStatusIcon, 30, 22, 0, 10);	

						var mrpGraphic:Graphic = new Graphic();
							mrpGraphic = graphic;
							mrpGraphic.symbol = newMRPSymbol;
							
							mrpGraphic.filters=[grayGlow];
							

                    mrpGraphic.checkForMouseListeners = false;
					
                    //graphic.attributes = resultAttributes;
					
					mrpGraphic.attributes = resultAttributes;
					
                    //result.addItem(queryResult);
						
					result.addItem(resultAttributes);
					
                    if (queryResult.center && !isNaN(queryResult.center.x) && !isNaN(queryResult.center.y)) // make sure it is a valid point
                    {
                        graphicsLayer.add(mrpGraphic);
                    }
                    // infowWindowRenderer on each graphic
                    var infoWindowRenderer:ClassFactory = new ClassFactory(PopUpRenderer);
                    	infoWindowRenderer.properties = { popUpInfo: configurePopUpInfo(link)};
                    	mrpGraphic.infoWindowRenderer = infoWindowRenderer;
                }

                return result;
            }
// *************************************************************					
//  Added for 2014 Capstone Updates to sort ESF Pick list by ESF		
//	This parsed the values used in MASS and makes them easier to sort in the app
// *************************************************************					
			private function getESFName(esf:String):String{
				
				var esfName:String="";	
				
				var str:String = esf.toLowerCase();
				var clipIdx:Number = str.indexOf("esf-");
				var clipStr:String = str.substr(clipIdx,str.length);
				var clipRemain:String = str.substr(0,clipIdx); 
				
				esfName=clipStr + " "+ clipRemain;
				
				return esfName
			}			
			
			
			private function calcESF(nimsCategory:String):String
			{
				var esfIcon:String="";	
				
				var str:String = nimsCategory.toLowerCase();
				var clipIdx:Number = str.indexOf("esf-")
				var clipStr:String = str.substr(clipIdx,str.length)
				
				if (clipStr)
				{
					switch (clipStr)
					{
						case "esf-9":
						{
							//esfIcon = "assets/images/MRP_esf9_28x_rnd.png";
							esfIcon = "assets/images/mrp/esf9_50x_rnd.png";
							break;
						}	

						case "esf-1":
						{
							//esfIcon = "assets/images/MRP_esf1_28x_rnd.png";
							esfIcon = "assets/images/mrp/esf1_50x_rnd.png";
							break;
						}	
						case "esf-2":
						{
							//esfIcon = "assets/images/MRP_esf2_28x_rnd.png";
							esfIcon = "assets/images/mrp/esf2_50x_rnd.png";
							break;
						}	
						case "esf-3":
						{
							//esfIcon = "assets/images/MRP_esf3_28x_rnd.png";
							esfIcon = "assets/images/mrp/esf3_50x_rnd.png";
							break;
						}	
						case "esf-4":
						{
							//esfIcon = "assets/images/MRP_esf4_28x_rnd.png";
							esfIcon = "assets/images/mrp/esf4_50x_rnd.png";
							break;
						}	
						case "esf-5":
						{
							//esfIcon = "assets/images/MRP_esf5_28x_rnd.png";
							esfIcon = "assets/images/mrp/esf5_50x_rnd.png";
							break;
						}	
						case "esf-6":
						{
							//esfIcon = "assets/images/MRP_esf5_28x_rnd.png";
							esfIcon = "assets/images/mrp/esf6_50x_rnd.png";
							break;
						}	
						case "esf-7":
						{
							//esfIcon = "assets/images/MRP_esf7_28x_rnd.png";
							esfIcon = "assets/images/mrp/esf7_50x_rnd.png";
							break;
						}	
						case "esf-8":
						{
							//esfIcon = "assets/images/MRP_esf8_28x_rnd.png";
							esfIcon = "assets/images/mrp/esf8_50x_rnd.png";
							break;
						}	
						case "esf-10":
						{
							//esfIcon = "assets/images/MRP_esf10_28x_rnd.png";
							esfIcon = "assets/images/mrp/esf10_50x_rnd.png";
							break;
						}	
						case "esf-11":
						{
							//esfIcon = "assets/images/MRP_esf11_28x_rnd.png";
							esfIcon = "assets/images/mrp/esf11_50x_rnd.png";
							break;
						}	
						case "esf-12":
						{
							//esfIcon = "assets/images/MRP_esf12_28x_rnd.png";
							esfIcon = "assets/images/mrp/esf12_50x_rnd.png";
							break;
						}	
						case "esf-13":
						{
							//esfIcon = "assets/images/MRP_esf13_28x_rnd.png";
							esfIcon = "assets/images/mrp/esf13_50x_rnd.png";
							break;
						}	
						case "esf-14":
						{
							//esfIcon = "assets/images/MRP_esf14_28x_rnd.png";
							esfIcon = "assets/images/mrp/esf14_50x_rnd.png";
							break;
						}	
						case "esf-15":
						{
							//esfIcon = "assets/images/MRP_esf15_28x_rnd.png";
							esfIcon = "assets/images/mrp/esf15_50x_rnd.png";
							break;
						}	
	
						
					}// end case
				}// end if
					
				return esfIcon
			}
			
			// *********************************************************************					
			//	Added for Capstone to create Origin Icons based on State or Province
			//	
			// *********************************************************************					
			
			private function calcStateIcon(state:String):String{
				
				var stateStr:String=state.toLowerCase();
				
				var stateIcon:String="";
				
				if(stateStr)
				{
					
					switch(stateStr)
					{
						// ********************************************************					
						//	Begin US State abreviations
						// ********************************************************					
						case "ar":
						{
							stateIcon = "assets/images/mrp/ema_logos/AR_EMA35x.png";
							break;
						}							
						case "al":
						{
							stateIcon = "assets/images/mrp/ema_logos/AL_EMA35x.png";
							break;
						}	
//							
						case "ak":
						{
							stateIcon = "assets/images/mrp/ema_logos/AK_EMA35x.png";
							break;
						}
						case "az":
						{
							stateIcon = "assets/images/mrp/ema_logos/AZ_EMA35x.png";
							break;
						}	
						case "ca":
						{
							stateIcon = "assets/images/mrp/ema_logos/CA_EMA35x.png";
							break;
						}
							
						case "ct":
						{
							stateIcon = "assets/images/mrp/ema_logos/CT_EMA35x.png";
							break;
						}
						case "dc":
						{
							stateIcon = "assets/images/mrp/ema_logos/DC_EMA35x.png";
							break;
						}
						case "de":
						{
							stateIcon = "assets/images/mrp/ema_logos/DE_EMA35x.png";
							break;
						}	
						case "fl":
						{
							stateIcon = "assets/images/mrp/ema_logos/FL_EMA35x.png";
							break;
						}	
						case "ga":
						{
							stateIcon = "assets/images/mrp/ema_logos/GA_EMA35x.png";
							break;
						}		
						case "id":
						{
							stateIcon = "assets/images/mrp/ema_logos/ID_EMA35x.png";
							break;
						}
						case "il":
						{
							stateIcon = "assets/images/mrp/ema_logos/IL_EMA35x.png";
							break;
						}	
							
						case "in":
						{
							stateIcon = "assets/images/mrp/ema_logos/IN_EMA35x.png";
							break;
						}
							
						case "io":
						{
							stateIcon = "assets/images/mrp/ema_logos/IO_EMA35x.png";
							break;
						}	
							
						case "ks":
						{
							stateIcon = "assets/images/mrp/ema_logos/KS_EMA35x.png";
							break;
						}	
							
						case "ky":
						{
							stateIcon = "assets/images/mrp/ema_logos/KY_EMA35x.png";
							break;
						}
							
						case "la":
						{
							stateIcon = "assets/images/mrp/ema_logos/LA_EMA35x.png";
							break;
						}	
							
						case "ma":
						{
							stateIcon = "assets/images/mrp/ema_logos/MA_EMA35x.png";
							break;
						}
							
						case "me":
						{
							stateIcon = "assets/images/mrp/ema_logos/ME_EMA35x.png";
							break;
						}
							
						case "md":
						{
							stateIcon = "assets/images/mrp/ema_logos/MD_EMA35x.png";
							break;
						}
						
						case "mi":
						{
							stateIcon = "assets/images/mrp/ema_logos/MI_EMA35x.png";
							break;
						}
							
						case "mn":
						{
							stateIcon = "assets/images/mrp/ema_logos/MN_EMA35x.png";
							break;
						}
							
						case "mo":
						{
							stateIcon = "assets/images/mrp/ema_logos/MO_EMA35x.png";
							break;
						}
						case "ms":
						{
							stateIcon = "assets/images/mrp/ema_logos/MS_EMA35x.png";
							break;
						}	
						case "mt":
						{
							stateIcon = "assets/images/mrp/ema_logos/MT_EMA35x.png";
							break;
						}
						
						case "nc":
						{
							stateIcon = "assets/images/mrp/ema_logos/NC_EMA35x.png";
							break;
						}
						case "nd":
						{
							stateIcon = "assets/images/mrp/ema_logos/ND_EMA35x.png";
							break;
						}
						case "nh":
						{
							stateIcon = "assets/images/mrp/ema_logos/NH_EMA35x.png";
							break;
						}
						
						case "nj":
						{
							stateIcon = "assets/images/mrp/ema_logos/NJ_EMA35x.png";
							break;
						}
						case "nv":
						{
							stateIcon = "assets/images/mrp/ema_logos/NV_EMA35x.png";
							break;
						}
							
						case "oh":
						{
							stateIcon = "assets/images/mrp/ema_logos/OH_EMA35x.png";
							break;
						}
						
						case "ok":
						{
							stateIcon = "assets/images/mrp/ema_logos/OK_EMA35x.png";
							break;
						}
							
						case "or":
						{
							stateIcon = "assets/images/mrp/ema_logos/OR_EMA35x.png";
							break;
						}
						case "pa":
						{
							stateIcon = "assets/images/mrp/ema_logos/PA_EMA35x.png";
							break;
						}
						case "ri":
						{
							stateIcon = "assets/images/mrp/ema_logos/RI_EMA35x.png";
							break;
						}
							
						case "sc":
						{
							stateIcon = "assets/images/mrp/ema_logos/SC_EMA35x.png";
							break;
						}
							
						case "sd":
						{
							stateIcon = "assets/images/mrp/ema_logos/SD_EMA35x.png";
							break;
						}							
						case "tn":
						{
							stateIcon = "assets/images/mrp/ema_logos/TN_EMA35x.png";
							break;
						}
						case "tx":
						{
							stateIcon = "assets/images/mrp/ema_logos/TX_EMA35x.png";
							break;
						}							
							
						case "ut":
						{
							stateIcon = "assets/images/mrp/ema_logos/UT_EMA35x.png";
							break;
						}
							
						case "va":
						{
							stateIcon = "assets/images/mrp/ema_logos/VA_EMA35x.png";
							break;
						}
						case "vt":
						{
							stateIcon = "assets/images/mrp/ema_logos/VT_EMA35x.png";
							break;
						}
							
						case "wi":
						{
							stateIcon = "assets/images/mrp/ema_logos/WI_EMA35x.png";
							break;
						}	
							
							
						case "wy":
						{
							stateIcon = "assets/images/mrp/ema_logos/WY_EMA35x.png";
							break;
						}
							
						case "wv":
						{
							stateIcon = "assets/images/mrp/ema_logos/WV_EMA35x.png";
							break;
						}	
							
					// ********************************************************					
					//	Begin Canadian Provinces
					// ********************************************************					
						case "ab":
						{
							stateIcon = "assets/images/mrp/ema_logos/CANADA_AB_EMA35x.png";
							break;
						}	
							
						case "bc":
						{
							stateIcon = "assets/images/mrp/ema_logos/CANADA_BC_EMA35x.png";
							break;
						}	
							
						case "mb":
						{
							stateIcon = "assets/images/mrp/ema_logos/CANADA_MB_EMA35x.png";
							break;
						}	
						case "nb":
						{
							stateIcon = "assets/images/mrp/ema_logos/CANADA_NB_EMA35x.png";
							break;
						}	
						case "nl":
						{
							stateIcon = "assets/images/mrp/ema_logos/CANADA_NL_EMA35x.png";
							break;
						}	
						case "ns":
						{
							stateIcon = "assets/images/mrp/ema_logos/CANADA_NS_EMA35x.png";
							break;
						}	
						case "nt":
						{
							stateIcon = "assets/images/mrp/ema_logos/CANADA_NT_EMA35x.png";
							break;
						}	
						case "nu":
						{
							stateIcon = "assets/images/mrp/ema_logos/CANADA_NU_EMA35x.png";
							break;
						}	
						case "on":
						{
							stateIcon = "assets/images/mrp/ema_logos/CANADA_ON_EMA35x.png";
							break;
						}	
						case "pe":
						{
							stateIcon = "assets/images/mrp/ema_logos/CANADA_PE_EMA35x.png";
							break;
						}	
						case "qc":
						{
							stateIcon = "assets/images/mrp/ema_logos/CANADA_QC_EMA35x.png";
							break;
						}	
						case "sk":
						{
							stateIcon = "assets/images/mrp/ema_logos/CANADA_SK_EMA35x.png";
							break;
						}	
						case "yt":
						{
							stateIcon = "assets/images/mrp/ema_logos/CANADA_YT_EMA35x.png";
							break;
						}	
							
							
						case null:
						{
							stateIcon="assets/images/mrp/ema_logos/greyNoState35x.png";
							break;
						}
							
						case "":
						{
							stateIcon="assets/images/mrp/ema_logos/greyNoState35x.png";
							break;
						}	
						case " ":
						{
							stateIcon="assets/images/mrp/ema_logos/greyNoState35x.png";
							break;
						}
							
						case "null":
						{
							stateIcon="assets/images/mrp/ema_logos/greyNoState35x.png";
							break;
						}	
							
						default:
						{
							stateIcon="assets/images/mrp/ema_logos/greyNoState35x.png";
							break;
						}
					}// end switch
					
				}// end if
				
				return stateIcon
			}// end function
			
			
			
            private function configurePopUpInfo(link:String):PopUpInfo
            {
                var popUpInfo:PopUpInfo = new PopUpInfo;

                popUpInfo.title = "{title}";
                popUpInfo.description = "{content}";

                if (link)
                {
                    var pos:Number = link.length - 4;
                    var sfx:String = link.substr(pos, 4).toLowerCase();
                    if ((sfx == ".jpg") || (sfx == ".png") || (sfx == ".gif")) // use PopUpMediaInfo if it is an image
                    {
                        var popUpMediaInfo:PopUpMediaInfo = new PopUpMediaInfo;
                        popUpMediaInfo.type = PopUpMediaInfo.IMAGE;
                        popUpMediaInfo.imageLinkURL = link;
                        popUpMediaInfo.imageSourceURL = link;
                        popUpInfo.popUpMediaInfos = [ popUpMediaInfo ];
                    }
                    else
                    {
                        popUpInfo.description += "<br/><a href='{link}'>{link}</a>"
                    }
                }

                return popUpInfo;
            }

            private function getFieldXML(fieldName:String):XML
            {
                var result:XML;

                for each (var fieldXML:XML in fields)
                {
                    if (fieldName == fieldXML.@name[0])
                    {
                        result = fieldXML;
                        break;
                    }
                }

                return result;
            }

            private function getField(fieldName:String):Field
            {
                var result:Field;

                for each (var field:Field in layerDetails.fields)
                {
                    if (fieldName == field.name)
                    {
                        result = field;
                        break;
                    }
                }

                return result;
            }

            private function getFeatureType(typeID:String):FeatureType
            {
                var result:FeatureType;

                for each (var featureType:FeatureType in layerDetails.types)
                {
                    if (typeID == featureType.id)
                    {
                        result = featureType;
                        break;
                    }
                }

                return result;
            }

            private function msToDate(ms:Number, dateFormat:String, useUTC:Boolean):String
            {
                var date:Date = new Date(ms);
                if (date.milliseconds == 999) // workaround for REST bug
                {
                    date.milliseconds++;
                }
                if (useUTC)
                {
                    date.minutes += date.timezoneOffset;
                }

                if (dateFormat)
                {
                    dateFormatter.formatString = dateFormat;
                    var result:String = dateFormatter.format(date);
                    if (result)
                    {
                        return result;
                    }
                    else
                    {
                        return dateFormatter.error;
                    }
                }
                else
                {
                    return date.toLocaleString();
                }
            }

			
			// ********************************************************					
			//	Not used in MRP Widget. MASS does not use domains
			// ********************************************************					
            private var domainsCache:Object = {}; // map from (fieldName + typeID) to CodedValueDomain

            private function getCodedValue(fieldName:String, fieldValue:String, typeID:String):CodedValue
            {
                var result:CodedValue;

                var domainsKey:String = fieldName + typeID;
                var codedValueDomain:CodedValueDomain;

                if (domainsKey in domainsCache)
                {
                    codedValueDomain = domainsCache[domainsKey];
                }
                else
                {
                    if (typeID)
                    {
                        var featureType:FeatureType = getFeatureType(typeID);
                        if (featureType)
                        {
                            codedValueDomain = featureType.domains[fieldName] as CodedValueDomain;
                        }
                    }
                    else
                    {
                        var field:Field = getField(fieldName);
                        if (field)
                        {
                            codedValueDomain = field.domain as CodedValueDomain;
                        }
                    }
                    domainsCache[domainsKey] = codedValueDomain;
                }

                if (codedValueDomain)
                {
                    for each (var codedValue:CodedValue in codedValueDomain.codedValues)
                    {
                        if (fieldValue == codedValue.code)
                        {
                            result = codedValue;
                            break;
                        }
                    }
                }

                return result;
            }

            private var hitimer:uint;


            private function mouseOutQueryResult(event:Event):void
            {
                clearTimeout(hitimer);
            }

			
			// ********************************************************					
			//
			// ********************************************************					
            private function clickQueryResult(event:Event):void
            {			
				
				var queryResult:ResultAttributesMRP = event.target.queryResultMRP as ResultAttributesMRP;
								
                if (queryResult.geometry)
                {
                    if (queryResult.geometry.type == Geometry.MAPPOINT)
                    {
 //                       if (map.scale > zoomScale)
  //                      {
 //                           map.scale = zoomScale;
 //                       }

                        map.centerAt(queryResult.point);
						
						//var newPoint:MapPoint = new MapPoint(queryResult.point.x,queryResult.point.y)
						//	newPoint.offset(150000,0);
						
						//map.centerAt(newPoint)
                    }
                    else
                    {
                        map.extent = queryResult.geometry.extent;

                        if (!map.extent.contains(queryResult.geometry))
                        {
                            map.level--;
                        }
                    }
                }
                clearTimeout(hitimer);
                hitimer = setTimeout(showHighlight, 300, [ queryResult ]);
            }

            private function showHighlight(params:Array):void
            {
                //var queryResult:ResultItemMRP = params[0];
				
				var queryResult:ResultAttributesMRP = params[0];
                var showHighlightPoint:MapPoint = queryResult.point as MapPoint;
				
                //popUpRenderer.popUpInfo = configurePopUpInfo(queryResult.attributes.link);
				popUpRenderer.popUpInfo = configurePopUpInfo(queryResult.link);
                popUpRenderer.graphic = queryResult.graphic;

                map.infoWindow.content = popUpRenderer;
                map.infoWindow.contentOwner = popUpRenderer.graphic;
                map.infoWindow.show(showHighlightPoint);
            }

            private function showMessage(msg:String, swfVisible:Boolean):void
            {
                //txtMessage.text = msg;
                //swfMessage.visible = swfVisible;
				clearMessage();
                msgVisible = true;
				
				wTemplate.widgetTitle = wTemplate.widgetTitle + msg;
            }

            private function clearMessage():void
            {
				wTemplate.widgetTitle= resetWidgetTitle;
                msgVisible = false;
            }

            private function widgetClosedHandler(event:Event):void
            {
                graphicsLayer.visible = false;
                stopWidgetTimer();
                hideInfoWindow();
            }

            private function widgetOpenedHandler(event:Event):void
            {
                if (graphicsLayer)
                {
                    graphicsLayer.visible = true;
                }
                startWidgetTimer();
            }

            private function toggleFilterPanel():void
            {
                this.currentState = "filterInput";
            }

			
			// *****************************************************************					
			//	Not used.  Filter not applied with MRP Widget to keep it simpler
			// *****************************************************************	
            private function doFilter():void
            {
                if (txtFilter.text)
                {
                    ArrayCollection(graphicsLayer.graphicProvider).filterFunction = filterGraphicLayer;
                    queryResultAC.filterFunction = filterDataList;
                }
                else
                {
                    ArrayCollection(graphicsLayer.graphicProvider).filterFunction = null;
                    queryResultAC.filterFunction = null;
                }
                ArrayCollection(graphicsLayer.graphicProvider).refresh();
                queryResultAC.refresh();

                // change it back to show the results
                wTemplate.selectedTitlebarButtonIndex = 1;
                this.currentState = "resultsList";
                if (queryResultAC.length < 1)
                {
                    showMessage(noResultLabel, false);
                }
                else
                {
                    showMessage(StringUtil.substitute(featuresFoundLabel, queryResultAC.length), false);
                }
            }

            private function doClear():void
            {
                wTemplate.selectedTitlebarButtonIndex = 1;
                txtFilter.text = '';
                doFilter();
            }

            private function filterGraphicLayer(graphic:Graphic):Boolean
            {
                return ResultAttributesMRP(graphic.attributes).content.match(new RegExp(txtFilter.text, 'i')) != null;
            }

            private function filterDataList(queryResult:ResultItemMRP):Boolean
            {
                return queryResult.attributes.content.match(new RegExp(txtFilter.text, 'i')) != null;
            }

            private function hideInfoWindow():void
            {
                if (map.infoWindow.contentOwner &&
                    ((map.infoWindow.contentOwner is Graphic && Graphic(map.infoWindow.contentOwner).graphicsLayer === graphicsLayer) || map.infoWindow.contentOwner is Map))
                {
                    map.infoWindow.hide();
                }
            }
			
			// rollOver feedback for status buttons
			protected function img_rollOverHandler(evt:MouseEvent):void {
				Image(evt.currentTarget).filters = [new GlowFilter(0xFFFFFFFF,1,6,6,4,1)];				
				
			}
			
			// rollOut feedback for status buttons
			protected function img1_rollOutHandler(evt:MouseEvent):void {
				Image(evt.currentTarget).filters = [];
			}
			
			
			//  ***************************************************************************
			//	The pick list is created dynamically based on the ESF types that are showing.
			//
			//	*******************************************************************
			
			private function createESF_MRP_pickList(dynFilter:ArrayCollection):void
			{
				
				esfPickListAC = new ArrayCollection();	
				var unqValAR:Array=new Array();

				// Get Unique Values for specified Data Column
				unqValAR=getUniqueValues(dynFilter,"nimsCategory");
				
					for(var i:int = 0; i < unqValAR.length; i++) 
					{
						var tempVal:String = unqValAR[i]
						var	getKey:String = tempVal.substr((tempVal.length-2),tempVal.length)

						
					   var esfObj:Object= new Object();   
					   		esfObj.esf=unqValAR[i];
					   		esfObj.key=getKey;
					   		esfObj.esfIcon=calcESF(unqValAR[i])

					  	 esfPickListAC.addItem(esfObj);
					}

				
			}
			
			//takes an AC and the filters out all duplicate entries
			public static function getUniqueValues (collection:ArrayCollection, propertyName:String):Array {
				var length:Number = collection.length;
				var dict:Dictionary = new Dictionary();
				
				var Obj:Object;
				var ObjVal:String="";
				
				for(var i:int = 0; i < length; i++)
				{
					ObjVal =collection[i]["nimsCategory"];
					dict[ObjVal] = ObjVal;
				}				
				var unique:Array = new Array();
				for(var propertyString:String in dict){				
					unique.push(dict[propertyString])
				}
				return unique;
			}			
					
			// ********************************************************					
			//	Sort Pick List
			// ********************************************************	
			private function sortESFTypes():void{
				
				var srt:spark.collections.Sort = new Sort();				
				var srtField:SortField = new SortField("key")
					srt.fields=[srtField];
					esfPickListAC.sort = srt;
					esfPickListAC.refresh();
				
			}
			
			
			
			// ********************************************************					
			//	This Function contains the main logic for the widget.
			//	
			//	Clicking on a status icon across the top of the widget will 
			//		filter the map
			//		filter the attribute list
			//		Return a count of MRP's
			//		Create a new picklist for the selection MRP's
			//		Sort the Pick list
			// ********************************************************				
			
			private function selectMRPStatus(mrpStatus:String):void
			{
				// must filter all
				hideInfoWindow();
				
				trace(mrpStatus);
				
			// Test to make sure the AC is populated	
			if(queryResultAC){
					
				
				queryResultAC.filterFunction=null;
				(graphicsLayer.graphicProvider as ArrayCollection).filterFunction=null;	
					
				lastSymbol="status";// resets to show mrp by status for cases when the data is refreshed				
				lastSelectedESF="All Resource Packages";// resets to show all esf's when you click a status
				lastMRPStatus=mrpStatus;// remembers the status that was clicked buy the user and is used to filter

				
				if (mrpStatus=="Available")
				{
					//graphicsLayer.filters=[];
					wTemplate.icon.source="assets/images/mrp/MRP_Green_40x.png";
					queryResultAC.filterFunction=filterBy_Available;
					queryResultAC.refresh();
//					showMessage("= Available " + queryResultAC.length, false);
					showMessage("" + lastSelectedESF + " (" + queryResultAC.length.toString() + " Available)", false);		
					
					txtCount.text="(" + queryResultAC.length.toString()+ ")";
					(graphicsLayer.graphicProvider as ArrayCollection).filterFunction = filterMap_Available;
					(graphicsLayer.graphicProvider as ArrayCollection).refresh();
					createESF_MRP_pickList(queryResultAC);
					sortESFTypes();// resets the summary by status  - Added 2/2-14

					
				}
				if(mrpStatus=="Not Available")
				{
					
					//mrp_indicator.source="assets/images/MRP_NotAvailable_Red.png";
					wTemplate.icon.source="assets/images/mrp/MRP_Red_40x.png";
					queryResultAC.filterFunction=filterBy_NotAvailable;
					queryResultAC.refresh();
					//showMessage("= Not Available " + queryResultAC.length, false);
					showMessage("" + lastSelectedESF + " (" + queryResultAC.length.toString() + " Not Available)", false);					
					txtCount.text="(" +queryResultAC.length.toString()+ ")";
					(graphicsLayer.graphicProvider as ArrayCollection).filterFunction = filterMap_NotAvailable;					
					(graphicsLayer.graphicProvider as ArrayCollection).refresh();
					createESF_MRP_pickList(queryResultAC);
					sortESFTypes();// resets the summary by status  - Added 2/2-14

					
				}
				if(mrpStatus=="Currently Operating")
				{
					//mrp_indicator.source="assets/images/MRP_Other_Yellow.png";
					wTemplate.icon.source="assets/images/mrp/MRP_Yellow_40x.png";
					queryResultAC.filterFunction=filterBy_Other;
					queryResultAC.refresh();
					//showMessage("= Operations Status " + queryResultAC.length, false);
					showMessage("" + lastSelectedESF + " (" + queryResultAC.length.toString() + " Currently Operating)", false);
					txtCount.text="(" +queryResultAC.length.toString() + ")";
					(graphicsLayer.graphicProvider as ArrayCollection).filterFunction = filterMap_Other;					
					(graphicsLayer.graphicProvider as ArrayCollection).refresh();
					createESF_MRP_pickList(queryResultAC);
					sortESFTypes();// resets the summary by status  - Added 2/2-14

				}
				
				// remove filters
				if(mrpStatus=="All")
				{
					//mrp_indicator.source="assets/images/MRP_ShowAll_40x.png";
					wTemplate.icon.source="assets/images/mrp/MRP_ShowAll_40x.png";
					queryResultAC.filterFunction=null;
					queryResultAC.refresh();
					//showMessage(" Count: " + queryResultAC.length, false);
					
					txtCount.text="(" + queryResultAC.length.toString() + ")";
					(graphicsLayer.graphicProvider as ArrayCollection).filterFunction = null;					
					(graphicsLayer.graphicProvider as ArrayCollection).refresh();
					createESF_MRP_pickList(queryResultAC);
					sortESFTypes();// resets the summary by status  - Added 2/2-14
					
					showMessage(lastSelectedESF + " (All Statuses " + queryResultAC.length.toString()+ ")", false);
					

					
				}

				cboMRPTypeESF.selectedItem = "All Resource Packages";// returns the prompt
				
				// check to see if the graphics layer was turned on.  If not, over-ride the visibility and turn layer on.
				
				if(cbxEsfIcons.selected==false){
					cbxEsfIcons.selected=true;
					destroyGraphicsLayer();
					mrpGraphicsOn();
				}

				
			}// end if test for queryResultAC
			}
			
			//	****************************************************
			//			FILTER LIST BY MRP
			//	****************************************************		
			private function filterBy_Available(nItem:Object):Boolean
			{
				var mrpSimpleStatus:String=nItem.mrpSimpleStatus;
				var nimsCategory:String=nItem.nimsCategory;

				if(mrpSimpleStatus=="Available")

					{
						return true
					}

				return false
				
			}
			private function filterBy_NotAvailable(nItem:Object):Boolean
			{
				var mrpSimpleStatus:String=nItem.mrpSimpleStatus;
				var nimsCategory:String=nItem.nimsCategory;				

				if(mrpSimpleStatus=="Not Available")
					{
						return true
					}


				return false
				
			}
			private function filterBy_Other(nItem:Object):Boolean
			{
				var mrpSimpleStatus:String=nItem.mrpSimpleStatus;
				var nimsCategory:String=nItem.nimsCategory;

				if(mrpSimpleStatus=="Currently Operating")
					{
						return true
					}			
				
				return false
				
			}
			
			private function filterBy_All(nItem:Object):Boolean
			{
				//var mrpSimpleStatus:String=nItem.mrpSimpleStatus;
				var nimsCategory:String=nItem.nimsCategory;
				
				if((lastSelectedESF=="")||(lastSelectedESF=="All Resource Packages")) 
				{
						return true
				}
				
				else
				{
					if(lastSelectedESF==nimsCategory)
					{
						return true
					}
				}							
				return false			
			}
			
			
			private function filterBy_ESF(nItem:Object):Boolean
			{
				var nimsCategory:String=nItem.nimsCategory;
				var mrpSimpleStatus:String=nItem.mrpSimpleStatus;
				
				if(lastSelectedESF=="All Resource Packages")
				{
					if(mrpSimpleStatus==lastMRPStatus)
					{
						return true
					}					

				}				
				else
				{
					if((nimsCategory==lastSelectedESF) && (mrpSimpleStatus==lastMRPStatus))
					{
						return true
					}
				}
				return false
			}
			
			
			
			//	****************************************************
			//			FILTER MAP ON MRP STATUS AND ESF
			//	****************************************************
			private function filterMap_Available(filter:Object):Boolean
			{
				var graphicF:Graphic = filter as Graphic;
				
				if((lastSelectedESF=="")||(lastSelectedESF=="All Resource Packages")) 
				{
					return(graphicF.attributes["mrpSimpleStatus"]=="Available");
				}
				else
				{
					return((graphicF.attributes["mrpSimpleStatus"]=="Available") && (graphicF.attributes["nimsCategory"]==lastSelectedESF))
				}
				
			}
			private function filterMap_NotAvailable(filter:Object):Boolean
			{
				var graphicF:Graphic = filter as Graphic;
				if((lastSelectedESF=="")||(lastSelectedESF=="All Resource Packages")) 
				{
					return(graphicF.attributes["mrpSimpleStatus"]=="Not Available");
				}
				else
				{
					return((graphicF.attributes["mrpSimpleStatus"]=="Not Available") && (graphicF.attributes["nimsCategory"]==lastSelectedESF))
				}
				
			}
			private function filterMap_Other(filter:Object):Boolean
			{
				var graphicF:Graphic = filter as Graphic;
				
				if((lastSelectedESF=="")||(lastSelectedESF=="All Resource Packages")) 
				{
					return(graphicF.attributes["mrpSimpleStatus"]=="Currently Operating");
				}
				else
				{
					return((graphicF.attributes["mrpSimpleStatus"]=="Currently Operating") && (graphicF.attributes["nimsCategory"]==lastSelectedESF))
				}
				
			}
			

			private function filterMap_All(filter:Object):Boolean
			{
				var graphicF:Graphic = filter as Graphic;
				
				if((lastSelectedESF=="")||(lastSelectedESF=="All Resource Packages")) 
				{
					return(graphicF.attributes)//["mrpSimpleStatus"]=="Other");
				}
				else
				{
					return(graphicF.attributes["nimsCategory"]==lastSelectedESF);
				}
				
			}
			
			
			private function filterMap_ESF(filter:Object):Boolean
			{
				var graphicF:Graphic = filter as Graphic;
				
				if((lastSelectedESF=="")||(lastSelectedESF=="All Resource Packages")) 
				{			
					return(graphicF.attributes["mrpSimpleStatus"]==lastMRPStatus);
				}
				
				else
				{
					return((graphicF.attributes["nimsCategory"]==lastSelectedESF) && (graphicF.attributes["mrpSimpleStatus"]==lastMRPStatus));
				}
			
			}
			
			protected function MRPTypeESF_changeHandler(event:IndexChangeEvent):void
			{
				lastSelectedESF=event.currentTarget.selectedItem.esf;
				hideInfoWindow();
				
				var teamName:String=lastSelectedESF;				
				var getESF_idx:Number = lastSelectedESF.indexOf("ESF")
					teamName = teamName.substr(0,getESF_idx)
						
						
				// If selectedESF="Show All"
				
				if(lastMRPStatus=="All")
				{
					queryResultAC.filterFunction=filterBy_All;
					(graphicsLayer.graphicProvider as ArrayCollection).filterFunction = filterMap_All;					
					(graphicsLayer.graphicProvider as ArrayCollection).refresh();
					
				}
				
				// if show all is selected from an MRP Button
				else if((lastSelectedESF=="All Resource Packages") && (lastMRPStatus!="All"))
				{
					queryResultAC.filterFunction=filterBy_ESF;
					(graphicsLayer.graphicProvider as ArrayCollection).filterFunction = filterMap_ESF;					
					(graphicsLayer.graphicProvider as ArrayCollection).refresh();
					
				}

				// if any MRP status filter buttons are clicked, check for the ESF Filter
				else
				{
					queryResultAC.filterFunction=filterBy_ESF;
					(graphicsLayer.graphicProvider as ArrayCollection).filterFunction = filterMap_ESF;					
					(graphicsLayer.graphicProvider as ArrayCollection).refresh();
				}

				
				queryResultAC.refresh();
				//showMessage(" Count: " + queryResultAC.length, false);

				showMessage("" + teamName + " (" +queryResultAC.length + " " + lastMRPStatus + ")", false);
				
				txtCount.text="("+ queryResultAC.length.toString()+ ")";

				

				
			}
			
//	***************************************				
//	Show Legend popup window for MRP Icons 
//	***************************************		
			private function esfLegend():void{
				
				myTableWindow = ESFLegend(PopUpManager.createPopUp(this.parent, ESFLegend, false));
				PopUpManager.centerPopUp(myTableWindow);
				myTableWindow.title= "Symbols and Definitions used within MASS";					
			}
			
			
//	*******************************************************************************				
//	Click on the checkbox to remove and re-add ESF Icons or MRP Icons to the map
//	*******************************************************************************		
			private function showESFIcons():void{
				
				
				if(graphicsLayer!=null)
				{
					// Clearing the graphics layer created Dispplay Object errors.
					// removing and adding in again fixed the issue
					graphicsLayer.removeEventListener(FlexEvent.HIDE, graphicsLayer_hideHandler)
					map.removeLayer(graphicsLayer);
					graphicsLayer = new GraphicsLayer();
					graphicsLayer.id="graphicsLayerID";
					graphicsLayer.name = "graphicsLayer";
					graphicsLayer.symbol = resultMarkerSymbol;
					graphicsLayer.addEventListener(FlexEvent.HIDE, graphicsLayer_hideHandler);
					map.addLayer(graphicsLayer);
					
				}
				
//	**************************************************************************				
//	Apply ESF Icons to the map, removing the MRP Hamburger Icons from the Map
//	**************************************************************************				
				
				if (cbxEsfIcons.selected){
					cbxEsfIcons.toolTip="Click to Restore MRP Icons"; 


					graphicsLayer.clear()// added
					mrpGraphicsOn();//added
				}	

				
				
//	*****************************************************				
//	Removing Icons from the map
//	*****************************************************				
				else{
					cbxEsfIcons.toolTip="Click to turn off MRP Graphics";
					
					graphicsLayer.clear()
					mrpGraphicsOff();
				}
					
			
			}
			
			// **********************************************************************					
			//	Change icons on the map:  by Status, ESF, or Origin
			//	Must destroy the graphics layer and re-create when icons are changed
			// **********************************************************************				
			private function mapSymbolClick(event:ItemClickEvent):void {
				
				lastSymbol=event.currentTarget.selectedValue;
				
				if (event.currentTarget.selectedValue == "status") {
					//Alert.show("You selected By State"); 
					graphicsLayer.clear()
					mrpGraphicsOff();
					mrpGraphicsOn();
					cbxEsfIcons.selected=true;
					
				} else if (event.currentTarget.selectedValue == "esf") {
					//Alert.show("You selected byESF");
					graphicsLayer.clear()
					mrpGraphicsOff();
					mrpGraphicsOn();
					cbxEsfIcons.selected=true;
					
//					showESFIcons();
					
				} else if (event.currentTarget.selectedValue == "origin") {
					//Alert.show("You selected byState");
					graphicsLayer.clear()
					mrpGraphicsOff();
					mrpGraphicsOn();
					cbxEsfIcons.selected=true;
				}
			}
			
			
			// *********************************************************************************************					
			//	Prepare to turn graphics layer on.
			//
			//	When turning on graphics use the same symbol used previously so as not to confuse the user
			// *********************************************************************************************
			private function mrpGraphicsOn():void{

					
					if (queryResultAC)// 
					{
						
						switch (lastSymbol)
						{
							case "status":
							{
								for (var bb:int = 0; bb< queryResultAC.source.length; bb++)
								{
									//var newMRPSymbol:PictureMarkerSymbol = new PictureMarkerSymbol(queryResultAC.source[b].mrpESFIcon, 38, 28, 0, 10);	
									var newMRPSymbol:PictureMarkerSymbol = new PictureMarkerSymbol(queryResultAC.source[bb].mrpStatusIcon, 30, 22, 0, 10);	
									
									var mrpGraphic:Graphic = new Graphic();
									mrpGraphic = queryResultAC.source[bb].graphic;
									mrpGraphic.symbol = newMRPSymbol;						
									
									mrpGraphic.filters=[grayGlow]
									
									graphicsLayer.add(mrpGraphic);
								}
								break;
							}	
								
							case "esf":
							{
								for (var b:int = 0; b< queryResultAC.source.length; b++)
								{
									
									var newMRPSymbol:PictureMarkerSymbol = new PictureMarkerSymbol(queryResultAC.source[b].mrpESFIcon, 38, 28, 0, 10);	
									
									var mrpGraphic:Graphic = new Graphic();
									mrpGraphic = queryResultAC.source[b].graphic;
									mrpGraphic.symbol = newMRPSymbol;						
									
									if(queryResultAC.source[b].mrpSimpleStatus=="Available")
									{
										mrpGraphic.filters=[greenGlow];
									}
									else if(queryResultAC.source[b].mrpSimpleStatus=="Not Available")
									{
										mrpGraphic.filters=[redGlow];
									}
										
									else if(queryResultAC.source[b].mrpSimpleStatus=="Currently Operating")
									{
										mrpGraphic.filters=[yellowGlow];
									}
										
									else
									{
										mrpGraphic.filters=[yellowGlow];
									} 
									
									graphicsLayer.add(mrpGraphic);
								}	
								
								break;
								
							}
							case "origin":
							{
								for (var b:int = 0; b< queryResultAC.source.length; b++)
								{
									
									var newMRPSymbol:PictureMarkerSymbol = new PictureMarkerSymbol(queryResultAC.source[b].mrpStateIcon, 35, 35, 0, 10);	
									
									var mrpGraphic:Graphic = new Graphic();
									mrpGraphic = queryResultAC.source[b].graphic;
									mrpGraphic.symbol = newMRPSymbol;						
									
									if(queryResultAC.source[b].mrpSimpleStatus=="Available")
									{
										mrpGraphic.filters=[greenGlow];
									}
									else if(queryResultAC.source[b].mrpSimpleStatus=="Not Available")
									{
										mrpGraphic.filters=[redGlow];
									}
										
									else if(queryResultAC.source[b].mrpSimpleStatus=="Currently Operating")
									{
										mrpGraphic.filters=[yellowGlow];
									}
										
									else
									{
										mrpGraphic.filters=[yellowGlow];
									} 
									
									graphicsLayer.add(mrpGraphic);
								}	
								
								break;
							}	
								
								
								
						}// end switch
						
						
						redrawWithFilters();	
						
					}// end if
						
					else{// if arrayCollection does not exist, then refresh the data layer
						refreshMRPs();
						trace("mrp refresh was forced.  Array collection did not exist")
					}
					
// visibility check commented out
					
//				}// end checkbox is clicked on	
				
			}// end	function
			
			
			// ************************************************************
			// filter graphics, filter ArrayCollection, and turn on layer
			private function redrawWithFilters():void{
				
				
				// The show all button was clicked.
				if(lastMRPStatus=="All")
				{
					queryResultAC.filterFunction=filterBy_All;
					(graphicsLayer.graphicProvider as ArrayCollection).filterFunction = filterMap_All;					
					(graphicsLayer.graphicProvider as ArrayCollection).refresh();
					
				}
					
					//   One of the Green, Red, Yellow buttons at the top was clicked
				else if((lastSelectedESF=="All Resource Packages") && (lastMRPStatus!="All"))
				{
					queryResultAC.filterFunction=filterBy_ESF;
					(graphicsLayer.graphicProvider as ArrayCollection).filterFunction = filterMap_ESF;					
					(graphicsLayer.graphicProvider as ArrayCollection).refresh();
					
				}
					
					// An ESF filter was selected, which set lastSelectedESF to a new value. 
					// Goto the filter which checks both mrp status and ESF Filter.
				else
				{
					queryResultAC.filterFunction=filterBy_ESF;
					(graphicsLayer.graphicProvider as ArrayCollection).filterFunction = filterMap_ESF;					
					(graphicsLayer.graphicProvider as ArrayCollection).refresh();
				}
				
				
				queryResultAC.refresh();
				
				graphicsLayer.visible;
				//zoomToFilteredPoints();
				
			}
			
			
			
			
			
			// *************************************
			// turn off the graphics layer checkbox
			// Calls DestroyGraphicsLayer
			private function mrpGraphicsOff():void{
				
				if (queryResultAC){
					
					queryResultAC.filterFunction=null;
					(graphicsLayer.graphicProvider as ArrayCollection).filterFunction=null;	
					
					graphicsLayer.visible=false;
					destroyGraphicsLayer()
				}
					
				else{
					//Alert.show("Debug message:  Data has been removed")
				}
			}
			
			// ***************************************
			// called by mrpGraphicsOff()
			private function destroyGraphicsLayer():void{
				
				if (queryResultAC)// make sure an
				{	
					
					if(graphicsLayer!=null)
					{
						// Clearing the graphics layer created Dispplay Object errors.
						// removing and adding in again fixed the issue
						graphicsLayer.visible=false;
						
						graphicsLayer.clear();
						
						
						graphicsLayer.removeEventListener(FlexEvent.HIDE, graphicsLayer_hideHandler)
						map.removeLayer(graphicsLayer);
						graphicsLayer = new GraphicsLayer();
						graphicsLayer.id="graphicsLayerID";
						graphicsLayer.name = "graphicsLayer";
						graphicsLayer.symbol = resultMarkerSymbol;
						graphicsLayer.addEventListener(FlexEvent.HIDE, graphicsLayer_hideHandler);
						map.addLayer(graphicsLayer);
						
					}
					trace("mrp graphics layer and event listener removed and re-created")
				}
				else
					trace("mrp graphics layer not destroyed since resultAC does not exist")
				
			}			
			
			
			
		]]>
    </fx:Script>
	
	<fx:Declarations>
		<mx:CurrencyFormatter id="usdFormatter" precision="0" 
							  currencySymbol="$" decimalSeparatorFrom="."
							  decimalSeparatorTo="." useNegativeSign="true" 
							  useThousandsSeparator="true" alignSymbol="left"/>
		
		<s:RadioButtonGroup id="mapOptionsGroup" itemClick="mapSymbolClick(event)"/>
	</fx:Declarations>

    <viewer:WidgetTemplate id="wTemplate" alpha="1" backgroundAlpha="1"
                           width="430" height="195" minHeight="195"
                           closed="widgetClosedHandler(event)"
                           open="widgetOpenedHandler(event)">
        <s:Group id="resultsList"
                 width="100%" height="100%"
                 visible="false"
                 visible.resultsList="true">
            <s:layout>
                <s:VerticalLayout gap="8"/>
            </s:layout>
            <s:HGroup id="boxMessage" paddingTop="3" paddingRight="3" paddingLeft="3" paddingBottom="5" horizontalAlign="center" verticalAlign="middle"
                      width="100%"
                      includeInLayout="{msgVisible}"
                      visible="{msgVisible}">

				
				
				<mx:Image verticalAlign="middle" id="mrpStatus_Available"
						  toolTip="Available"
						  source="assets/images/mrp/MRP_Available_Green80x_rnd.png"
						  rollOver="img_rollOverHandler(event);"
						  rollOut="img1_rollOutHandler(event);"
						  click="selectMRPStatus('Available')">
				</mx:Image>
				
				<mx:Image verticalAlign="middle" id="mrpStatus_Not"
						  toolTip="Not Available"
						  source="assets/images/mrp/MRP_NotAvailable_Red80x_rnd.png"
						  rollOver="img_rollOverHandler(event);"
						  rollOut="img1_rollOutHandler(event);"
						  click="selectMRPStatus('Not Available')">
				</mx:Image>
				
				<mx:Image verticalAlign="middle" id="mrpStatus_Other"
						  toolTip="Currently Operating"
						  source="assets/images/mrp/MRP_Other_Yellow80x_rnd.png"
						  rollOver="img_rollOverHandler(event);"
						  rollOut="img1_rollOutHandler(event);" 
						  click="selectMRPStatus('Currently Operating')">
				</mx:Image>
				
				<mx:Image verticalAlign="middle" id="mrpStatus_All"
						  maxWidth="80" toolTip="Show All MRPs"
						  source="assets/images/mrp/MRP_ShowAll_80x_border.png"
						  rollOver="img_rollOverHandler(event);"
						  rollOut="img1_rollOutHandler(event);"
						  click="selectMRPStatus('All')">
				</mx:Image>

			</s:HGroup>



		<!-- map Options-->		
		<s:HGroup horizontalAlign="center" verticalAlign="middle" width="100%" height="14" includeInLayout="{msgVisible}" gap="10"
				  visible="{msgVisible}">
			
			<s:CheckBox  toolTip="Toggle On/Off MRP Graphics" click="showESFIcons()" id="cbxEsfIcons" fontSize="14" selected="false" label="Show MRPs by:  "/>
			
			<s:RadioButton id="btnByStatus" selected="true" value="status" label="Status" fontSize="14" group="{mapOptionsGroup}" toolTip="Symbolize MRP's by Operational Status" />
				
			<s:RadioButton id="btnByESF" value="esf" label="ESF"  fontSize="14" group="{mapOptionsGroup}" toolTip="Symbolize MRP's by ESF"/>
				
			<s:RadioButton id="btnByState" value="origin" label="State of Origin" fontSize="14" group="{mapOptionsGroup}" toolTip="Symbolize MRP's by State of Origin" />
					
		</s:HGroup>
			
			
			
		<s:HGroup horizontalAlign="center" verticalAlign="middle" width="100%" includeInLayout="{msgVisible}"
				  visible="{msgVisible}">

			<s:Label width="50" verticalAlign="middle" visible="true" id="txtCount" fontSize="18" text=""/>

			
			<mx:Image verticalAlign="middle"   source="assets/images/legend32.png" toolTip="Show Legend for MRP and ESF Icons"
					  rollOver="img_rollOverHandler(event);"
					  rollOut="img1_rollOutHandler(event);"
					  click="esfLegend();"/>

			<s:ComboBox alpha="1"  id = "cboMRPTypeESF" prompt="Select ESF / MRP Type" dataProvider="{esfPickListAC}" toolTip="Select an ESF" contentBackgroundAlpha="1"
							  labelField="esf" width="75%" change="MRPTypeESF_changeHandler(event)" paddingRight="3" requireSelection="false">
			</s:ComboBox>
		</s:HGroup>

			
			
			
			
            
            <s:Scroller width="100%" height="100%">
                <ns:QueryResultDataGroup dataProvider="{queryResultAC}"
                                            queryResultClick="clickQueryResult(event)">
                    <Query:layout>
                        <s:VerticalLayout gap="2"
                                          horizontalAlign="justify"
                                          useVirtualLayout="true"/>
                    </Query:layout>
                </ns:QueryResultDataGroup>
            </s:Scroller>
        </s:Group>

<!-- Filter not used in MRP Widget--> 		
        <s:Group id="filterInput"
                 width="100%" height="100%"
                 visible="false"
                 visible.filterInput="true">
            <s:layout>
                <s:VerticalLayout gap="4" horizontalAlign="center"/>
            </s:layout>
            <s:RichEditableText editable="false" text="{filterFieldAlias} : "/>
            <s:TextInput id="txtFilter"
                         width="98%"
                         enter="doFilter()"/>
            <s:HGroup width="100%" horizontalAlign="center">
                <s:Button click="doFilter()" label="{filterButtonLabel}"/>
                <s:Button click="doClear()" label="{clearButtonLabel}"/>
            </s:HGroup>
        </s:Group>
<!-- Filter not used in MRP Widget--> 	
		
    </viewer:WidgetTemplate>

</viewer:BaseWidget>
